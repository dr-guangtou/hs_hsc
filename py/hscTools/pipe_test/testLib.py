# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.




"""

Various swigged-up C++ classes for testing

"""


from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_testLib', [dirname(__file__)])
        except ImportError:
            import _testLib
            return _testLib
        if fp is not None:
            try:
                _mod = imp.load_module('_testLib', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _testLib = swig_import_helper()
    del swig_import_helper
else:
    import _testLib
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _testLib.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self):
        """value(SwigPyIterator self) -> PyObject *"""
        return _testLib.SwigPyIterator_value(self)

    def incr(self, n=1):
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        incr(SwigPyIterator self) -> SwigPyIterator
        """
        return _testLib.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        decr(SwigPyIterator self) -> SwigPyIterator
        """
        return _testLib.SwigPyIterator_decr(self, n)

    def distance(self, *args):
        """distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _testLib.SwigPyIterator_distance(self, *args)

    def equal(self, *args):
        """equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _testLib.SwigPyIterator_equal(self, *args)

    def copy(self):
        """copy(SwigPyIterator self) -> SwigPyIterator"""
        return _testLib.SwigPyIterator_copy(self)

    def next(self):
        """next(SwigPyIterator self) -> PyObject *"""
        return _testLib.SwigPyIterator_next(self)

    def __next__(self):
        """__next__(SwigPyIterator self) -> PyObject *"""
        return _testLib.SwigPyIterator___next__(self)

    def previous(self):
        """previous(SwigPyIterator self) -> PyObject *"""
        return _testLib.SwigPyIterator_previous(self)

    def advance(self, *args):
        """advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _testLib.SwigPyIterator_advance(self, *args)

    def __eq__(self, *args):
        """__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _testLib.SwigPyIterator___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _testLib.SwigPyIterator___ne__(self, *args)

    def __iadd__(self, *args):
        """__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _testLib.SwigPyIterator___iadd__(self, *args)

    def __isub__(self, *args):
        """__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _testLib.SwigPyIterator___isub__(self, *args)

    def __add__(self, *args):
        """__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _testLib.SwigPyIterator___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _testLib.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator_swigregister = _testLib.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class ios_base(_object):
    """Proxy of C++ std::ios_base class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ios_base, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ios_base, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    erase_event = _testLib.ios_base_erase_event
    imbue_event = _testLib.ios_base_imbue_event
    copyfmt_event = _testLib.ios_base_copyfmt_event
    def register_callback(self, *args):
        """register_callback(ios_base self, std::ios_base::event_callback __fn, int __index)"""
        return _testLib.ios_base_register_callback(self, *args)

    def flags(self, *args):
        """
        flags(ios_base self) -> std::ios_base::fmtflags
        flags(ios_base self, std::ios_base::fmtflags __fmtfl) -> std::ios_base::fmtflags
        """
        return _testLib.ios_base_flags(self, *args)

    def setf(self, *args):
        """
        setf(ios_base self, std::ios_base::fmtflags __fmtfl) -> std::ios_base::fmtflags
        setf(ios_base self, std::ios_base::fmtflags __fmtfl, std::ios_base::fmtflags __mask) -> std::ios_base::fmtflags
        """
        return _testLib.ios_base_setf(self, *args)

    def unsetf(self, *args):
        """unsetf(ios_base self, std::ios_base::fmtflags __mask)"""
        return _testLib.ios_base_unsetf(self, *args)

    def precision(self, *args):
        """
        precision(ios_base self) -> std::streamsize
        precision(ios_base self, std::streamsize __prec) -> std::streamsize
        """
        return _testLib.ios_base_precision(self, *args)

    def width(self, *args):
        """
        width(ios_base self) -> std::streamsize
        width(ios_base self, std::streamsize __wide) -> std::streamsize
        """
        return _testLib.ios_base_width(self, *args)

    def sync_with_stdio(__sync=True):
        """
        sync_with_stdio(bool __sync=True) -> bool
        sync_with_stdio() -> bool
        """
        return _testLib.ios_base_sync_with_stdio(__sync)

    if _newclass:sync_with_stdio = staticmethod(sync_with_stdio)
    __swig_getmethods__["sync_with_stdio"] = lambda x: sync_with_stdio
    def imbue(self, *args):
        """imbue(ios_base self, std::locale const & __loc) -> std::locale"""
        return _testLib.ios_base_imbue(self, *args)

    def getloc(self):
        """getloc(ios_base self) -> std::locale"""
        return _testLib.ios_base_getloc(self)

    def xalloc():
        """xalloc() -> int"""
        return _testLib.ios_base_xalloc()

    if _newclass:xalloc = staticmethod(xalloc)
    __swig_getmethods__["xalloc"] = lambda x: xalloc
    def iword(self, *args):
        """iword(ios_base self, int __ix) -> long &"""
        return _testLib.ios_base_iword(self, *args)

    def pword(self, *args):
        """pword(ios_base self, int __ix) -> void *&"""
        return _testLib.ios_base_pword(self, *args)

    __swig_destroy__ = _testLib.delete_ios_base
    __del__ = lambda self : None;
ios_base_swigregister = _testLib.ios_base_swigregister
ios_base_swigregister(ios_base)
cvar = _testLib.cvar
ios_base.boolalpha = _testLib.cvar.ios_base_boolalpha
ios_base.dec = _testLib.cvar.ios_base_dec
ios_base.fixed = _testLib.cvar.ios_base_fixed
ios_base.hex = _testLib.cvar.ios_base_hex
ios_base.internal = _testLib.cvar.ios_base_internal
ios_base.left = _testLib.cvar.ios_base_left
ios_base.oct = _testLib.cvar.ios_base_oct
ios_base.right = _testLib.cvar.ios_base_right
ios_base.scientific = _testLib.cvar.ios_base_scientific
ios_base.showbase = _testLib.cvar.ios_base_showbase
ios_base.showpoint = _testLib.cvar.ios_base_showpoint
ios_base.showpos = _testLib.cvar.ios_base_showpos
ios_base.skipws = _testLib.cvar.ios_base_skipws
ios_base.unitbuf = _testLib.cvar.ios_base_unitbuf
ios_base.uppercase = _testLib.cvar.ios_base_uppercase
ios_base.adjustfield = _testLib.cvar.ios_base_adjustfield
ios_base.basefield = _testLib.cvar.ios_base_basefield
ios_base.floatfield = _testLib.cvar.ios_base_floatfield
ios_base.badbit = _testLib.cvar.ios_base_badbit
ios_base.eofbit = _testLib.cvar.ios_base_eofbit
ios_base.failbit = _testLib.cvar.ios_base_failbit
ios_base.goodbit = _testLib.cvar.ios_base_goodbit
ios_base.app = _testLib.cvar.ios_base_app
ios_base.ate = _testLib.cvar.ios_base_ate
ios_base.binary = _testLib.cvar.ios_base_binary
ios_base.ios_base_in = _testLib.cvar.ios_base_ios_base_in
ios_base.out = _testLib.cvar.ios_base_out
ios_base.trunc = _testLib.cvar.ios_base_trunc
ios_base.beg = _testLib.cvar.ios_base_beg
ios_base.cur = _testLib.cvar.ios_base_cur
ios_base.end = _testLib.cvar.ios_base_end

def ios_base_sync_with_stdio(__sync=True):
  """
    sync_with_stdio(bool __sync=True) -> bool
    ios_base_sync_with_stdio() -> bool
    """
  return _testLib.ios_base_sync_with_stdio(__sync)

def ios_base_xalloc():
  """ios_base_xalloc() -> int"""
  return _testLib.ios_base_xalloc()

class ios(ios_base):
    """Proxy of C++ std::basic_ios<(char)> class"""
    __swig_setmethods__ = {}
    for _s in [ios_base]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ios, name, value)
    __swig_getmethods__ = {}
    for _s in [ios_base]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ios, name)
    __repr__ = _swig_repr
    def rdstate(self):
        """rdstate(ios self) -> std::ios_base::iostate"""
        return _testLib.ios_rdstate(self)

    def clear(self, *args):
        """
        clear(ios self, std::ios_base::iostate __state=goodbit)
        clear(ios self)
        """
        return _testLib.ios_clear(self, *args)

    def setstate(self, *args):
        """setstate(ios self, std::ios_base::iostate __state)"""
        return _testLib.ios_setstate(self, *args)

    def good(self):
        """good(ios self) -> bool"""
        return _testLib.ios_good(self)

    def eof(self):
        """eof(ios self) -> bool"""
        return _testLib.ios_eof(self)

    def fail(self):
        """fail(ios self) -> bool"""
        return _testLib.ios_fail(self)

    def bad(self):
        """bad(ios self) -> bool"""
        return _testLib.ios_bad(self)

    def exceptions(self, *args):
        """
        exceptions(ios self) -> std::ios_base::iostate
        exceptions(ios self, std::ios_base::iostate __except)
        """
        return _testLib.ios_exceptions(self, *args)

    def __init__(self, *args): 
        """__init__(std::basic_ios<(char)> self, std::basic_streambuf< char,std::char_traits< char > > * __sb) -> ios"""
        this = _testLib.new_ios(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _testLib.delete_ios
    __del__ = lambda self : None;
    def tie(self, *args):
        """
        tie(ios self) -> ostream
        tie(ios self, ostream __tiestr) -> ostream
        """
        return _testLib.ios_tie(self, *args)

    def rdbuf(self, *args):
        """
        rdbuf(ios self) -> std::basic_streambuf< char,std::char_traits< char > >
        rdbuf(ios self, std::basic_streambuf< char,std::char_traits< char > > * __sb) -> std::basic_streambuf< char,std::char_traits< char > > *
        """
        return _testLib.ios_rdbuf(self, *args)

    def copyfmt(self, *args):
        """copyfmt(ios self, ios __rhs) -> ios"""
        return _testLib.ios_copyfmt(self, *args)

    def fill(self, *args):
        """
        fill(ios self) -> std::basic_ios< char >::char_type
        fill(ios self, std::basic_ios< char >::char_type __ch) -> std::basic_ios< char >::char_type
        """
        return _testLib.ios_fill(self, *args)

    def imbue(self, *args):
        """imbue(ios self, std::locale const & __loc) -> std::locale"""
        return _testLib.ios_imbue(self, *args)

    def narrow(self, *args):
        """narrow(ios self, std::basic_ios< char >::char_type __c, char __dfault) -> char"""
        return _testLib.ios_narrow(self, *args)

    def widen(self, *args):
        """widen(ios self, char __c) -> std::basic_ios< char >::char_type"""
        return _testLib.ios_widen(self, *args)

ios_swigregister = _testLib.ios_swigregister
ios_swigregister(ios)

class ostream(ios):
    """Proxy of C++ std::basic_ostream<(char)> class"""
    __swig_setmethods__ = {}
    for _s in [ios]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ostream, name, value)
    __swig_getmethods__ = {}
    for _s in [ios]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ostream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(std::basic_ostream<(char)> self, std::basic_streambuf< char,std::char_traits< char > > * __sb) -> ostream"""
        this = _testLib.new_ostream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _testLib.delete_ostream
    __del__ = lambda self : None;
    def __lshift__(self, *args):
        """
        __lshift__(ostream self, std::basic_ostream< char,std::char_traits< char > > &(*)(std::basic_ostream< char,std::char_traits< char > > &) __pf) -> ostream
        __lshift__(ostream self, std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &) __pf) -> ostream
        __lshift__(ostream self, std::ios_base &(*)(std::ios_base &) __pf) -> ostream
        __lshift__(ostream self, long __n) -> ostream
        __lshift__(ostream self, unsigned long __n) -> ostream
        __lshift__(ostream self, bool __n) -> ostream
        __lshift__(ostream self, short __n) -> ostream
        __lshift__(ostream self, unsigned short __n) -> ostream
        __lshift__(ostream self, int __n) -> ostream
        __lshift__(ostream self, unsigned int __n) -> ostream
        __lshift__(ostream self, long long __n) -> ostream
        __lshift__(ostream self, unsigned long long __n) -> ostream
        __lshift__(ostream self, double __f) -> ostream
        __lshift__(ostream self, float __f) -> ostream
        __lshift__(ostream self, long double __f) -> ostream
        __lshift__(ostream self, void const * __p) -> ostream
        __lshift__(ostream self, std::basic_streambuf< char,std::char_traits< char > > * __sb) -> ostream
        __lshift__(ostream self, std::basic_string< char,std::char_traits< char >,std::allocator< char > > const & s) -> ostream
        """
        return _testLib.ostream___lshift__(self, *args)

    def put(self, *args):
        """put(ostream self, std::basic_ostream< char >::char_type __c) -> ostream"""
        return _testLib.ostream_put(self, *args)

    def write(self, *args):
        """write(ostream self, std::basic_ostream< char >::char_type const * __s, std::streamsize __n) -> ostream"""
        return _testLib.ostream_write(self, *args)

    def flush(self):
        """flush(ostream self) -> ostream"""
        return _testLib.ostream_flush(self)

    def tellp(self):
        """tellp(ostream self) -> std::basic_ostream< char >::pos_type"""
        return _testLib.ostream_tellp(self)

    def seekp(self, *args):
        """
        seekp(ostream self, std::basic_ostream< char >::pos_type arg2) -> ostream
        seekp(ostream self, std::basic_ostream< char >::off_type arg2, std::ios_base::seekdir arg3) -> ostream
        """
        return _testLib.ostream_seekp(self, *args)

ostream_swigregister = _testLib.ostream_swigregister
ostream_swigregister(ostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

class istream(ios):
    """Proxy of C++ std::basic_istream<(char)> class"""
    __swig_setmethods__ = {}
    for _s in [ios]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, istream, name, value)
    __swig_getmethods__ = {}
    for _s in [ios]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, istream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(std::basic_istream<(char)> self, std::basic_streambuf< char,std::char_traits< char > > * __sb) -> istream"""
        this = _testLib.new_istream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _testLib.delete_istream
    __del__ = lambda self : None;
    def __rshift__(self, *args):
        """
        __rshift__(istream self, std::basic_istream< char,std::char_traits< char > > &(*)(std::basic_istream< char,std::char_traits< char > > &) __pf) -> istream
        __rshift__(istream self, std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &) __pf) -> istream
        __rshift__(istream self, std::ios_base &(*)(std::ios_base &) __pf) -> istream
        __rshift__(istream self, bool & __n) -> istream
        __rshift__(istream self, short & __n) -> istream
        __rshift__(istream self, unsigned short & __n) -> istream
        __rshift__(istream self, int & __n) -> istream
        __rshift__(istream self, unsigned int & __n) -> istream
        __rshift__(istream self, long & __n) -> istream
        __rshift__(istream self, unsigned long & __n) -> istream
        __rshift__(istream self, long long & __n) -> istream
        __rshift__(istream self, unsigned long long & __n) -> istream
        __rshift__(istream self, float & __f) -> istream
        __rshift__(istream self, double & __f) -> istream
        __rshift__(istream self, long double & __f) -> istream
        __rshift__(istream self, void *& __p) -> istream
        __rshift__(istream self, std::basic_streambuf< char,std::char_traits< char > > * __sb) -> istream
        """
        return _testLib.istream___rshift__(self, *args)

    def gcount(self):
        """gcount(istream self) -> std::streamsize"""
        return _testLib.istream_gcount(self)

    def get(self, *args):
        """
        get(istream self) -> std::basic_istream< char >::int_type
        get(istream self, std::basic_istream< char >::char_type & __c) -> istream
        get(istream self, std::basic_istream< char >::char_type * __s, std::streamsize __n, std::basic_istream< char >::char_type __delim) -> istream
        get(istream self, std::basic_istream< char >::char_type * __s, std::streamsize __n) -> istream
        get(istream self, std::basic_streambuf< char,std::char_traits< char > > & __sb, std::basic_istream< char >::char_type __delim) -> istream
        get(istream self, std::basic_streambuf< char,std::char_traits< char > > & __sb) -> istream
        """
        return _testLib.istream_get(self, *args)

    def getline(self, *args):
        """
        getline(istream self, std::basic_istream< char >::char_type * __s, std::streamsize __n, std::basic_istream< char >::char_type __delim) -> istream
        getline(istream self, std::basic_istream< char >::char_type * __s, std::streamsize __n) -> istream
        """
        return _testLib.istream_getline(self, *args)

    def ignore(self, *args):
        """
        ignore(istream self, std::streamsize __n=1, std::basic_istream< char >::int_type __delim=std::char_traits< char >::eof()) -> istream
        ignore(istream self, std::streamsize __n=1) -> istream
        ignore(istream self) -> istream
        """
        return _testLib.istream_ignore(self, *args)

    def peek(self):
        """peek(istream self) -> std::basic_istream< char >::int_type"""
        return _testLib.istream_peek(self)

    def read(self, *args):
        """read(istream self, std::basic_istream< char >::char_type * __s, std::streamsize __n) -> istream"""
        return _testLib.istream_read(self, *args)

    def readsome(self, *args):
        """readsome(istream self, std::basic_istream< char >::char_type * __s, std::streamsize __n) -> std::streamsize"""
        return _testLib.istream_readsome(self, *args)

    def putback(self, *args):
        """putback(istream self, std::basic_istream< char >::char_type __c) -> istream"""
        return _testLib.istream_putback(self, *args)

    def unget(self):
        """unget(istream self) -> istream"""
        return _testLib.istream_unget(self)

    def sync(self):
        """sync(istream self) -> int"""
        return _testLib.istream_sync(self)

    def tellg(self):
        """tellg(istream self) -> std::basic_istream< char >::pos_type"""
        return _testLib.istream_tellg(self)

    def seekg(self, *args):
        """
        seekg(istream self, std::basic_istream< char >::pos_type arg2) -> istream
        seekg(istream self, std::basic_istream< char >::off_type arg2, std::ios_base::seekdir arg3) -> istream
        """
        return _testLib.istream_seekg(self, *args)

istream_swigregister = _testLib.istream_swigregister
istream_swigregister(istream)

class iostream(istream,ostream):
    """Proxy of C++ std::basic_iostream<(char)> class"""
    __swig_setmethods__ = {}
    for _s in [istream,ostream]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, iostream, name, value)
    __swig_getmethods__ = {}
    for _s in [istream,ostream]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, iostream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(std::basic_iostream<(char)> self, std::basic_streambuf< char,std::char_traits< char > > * __sb) -> iostream"""
        this = _testLib.new_iostream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _testLib.delete_iostream
    __del__ = lambda self : None;
iostream_swigregister = _testLib.iostream_swigregister
iostream_swigregister(iostream)

endl_cb_ptr = _testLib.endl_cb_ptr

def endl(*args):
  """endl(ostream arg1) -> ostream"""
  return _testLib.endl(*args)
endl = _testLib.endl
ends_cb_ptr = _testLib.ends_cb_ptr

def ends(*args):
  """ends(ostream arg1) -> ostream"""
  return _testLib.ends(*args)
ends = _testLib.ends
flush_cb_ptr = _testLib.flush_cb_ptr

def flush(*args):
  """flush(ostream arg1) -> ostream"""
  return _testLib.flush(*args)
flush = _testLib.flush
SHARED_PTR_DISOWN = _testLib.SHARED_PTR_DISOWN
LSST_BASE_BASE_H = _testLib.LSST_BASE_BASE_H
import lsst.pex.exceptions

import lsst.afw.geom.geomLib
import lsst.daf.base.baseLib
import lsst.pex.exceptions.exceptionsLib
import lsst.afw.geom.ellipses.ellipsesLib
import lsst.afw.detection.detectionLib
import lsst.afw.image.imageLib
import lsst.pex.policy.policyLib
import lsst.daf.persistence.persistenceLib
import lsst.pex.logging.loggingLib
import lsst.afw.coord.coordLib
import lsst.afw.fits.fitsLib
import lsst.afw.table.io.ioLib
import lsst.afw.cameraGeom.cameraGeomLib
import lsst.afw.math.mathLib
import lsst.afw.table.tableLib
import lsst.meas.algorithms.algorithmsLib
import lsst.meas.extensions.multiShapelet.multiShapeletLib
import lsst.shapelet.shapeletLib
class RosenbrockObjective(lsst.meas.extensions.multiShapelet.multiShapeletLib.Objective):
    """Proxy of C++ RosenbrockObjective class"""
    __swig_setmethods__ = {}
    for _s in [lsst.meas.extensions.multiShapelet.multiShapeletLib.Objective]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, RosenbrockObjective, name, value)
    __swig_getmethods__ = {}
    for _s in [lsst.meas.extensions.multiShapelet.multiShapeletLib.Objective]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RosenbrockObjective, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(RosenbrockObjective self, double lambda_) -> RosenbrockObjective"""
        this = _testLib.new_RosenbrockObjective(*args)
        try: self.this.append(this)
        except: self.this = this
    def computeFunction(self, *args):
        """computeFunction(RosenbrockObjective self, ndarray::Array< double const,1,1 > const & parameters, ndarray::Array< double,1,1 > const & function)"""
        return _testLib.RosenbrockObjective_computeFunction(self, *args)

    def computeDerivative(self, *args):
        """
        computeDerivative(RosenbrockObjective self, ndarray::Array< double const,1,1 > const & parameters, ndarray::Array< double const,1,1 > const & function, 
            ndarray::Array< double,2,-2 > const & derivative)
        """
        return _testLib.RosenbrockObjective_computeDerivative(self, *args)

    __swig_destroy__ = _testLib.delete_RosenbrockObjective
    __del__ = lambda self : None;
RosenbrockObjective_swigregister = _testLib.RosenbrockObjective_swigregister
RosenbrockObjective_swigregister(RosenbrockObjective)

# This file is compatible with both classic and new-style classes.


